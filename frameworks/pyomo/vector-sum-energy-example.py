# Import necessary libraries
import pandas as pd
import pyomo.environ as pyo
from pyomo.environ import *
from pyomo.opt import SolverFactory

# Reading the instance
# Read input data from Excel sheets into pandas DataFrames
data_generators = pd.read_excel('../../files/energy_inputs_dados.xlsx', sheet_name='geracao')
data_demands = pd.read_excel('../../files/energy_inputs_dados.xlsx', sheet_name='carga')
data_dependences = pd.read_excel('../../files/energy_inputs_dados.xlsx', sheet_name='dependencia')

# Calculate the number of generators
number_of_gens = len(data_generators)

# Create a Concrete Model for Pyomo optimization
model = pyo.ConcreteModel()

# Define a Pyomo variable for each generator's power output
model.Pg = pyo.Var(range(number_of_gens), bounds=(0, None))

# Constraints
# Ensure that the total power generated equals the total demand
model.balance = pyo.Constraint(expr=sum(model.Pg[g] for g in data_generators.id) == sum(data_demands.valor))
# Ensure that the power generated for the first dependence meets a specific condition
model.condition = pyo.Constraint(expr=float(data_demands.valor[0]) <= model.Pg[0] + model.Pg[3])
# Ensure that the power generated by each generator is within its specified limits
model.limits = pyo.ConstraintList()
for g in data_generators.id:
    model.limits.add(expr=model.Pg[g] <= float(data_generators.maximo[g]))

# Objective Function
# Minimize the total cost, which is the sum of the power generated multiplied by the cost for each generator
model.obj = pyo.Objective(expr=sum([model.Pg[g] * float(data_generators.custo[g]) for g in data_generators.id]))

# Choose the solver (GLPK in this case) and solve the optimization problem
opt = SolverFactory('glpk')
opt.solve(model)

# Print the model's constraints, variables, and other details
model.pprint()

# Add the values used by each generator in the optimal solution to the 'gen-used' column in data_generators
data_generators['gen-used'] = [pyo.value(model.Pg[g]) for g in data_generators.id]

# Print the data_generators DataFrame with the additional 'gen-used' column
print(data_generators)

# Print the optimal cost obtained from the optimization
print('Optimal cost is ' + str(value(model.obj)))
